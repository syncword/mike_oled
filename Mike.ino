#include <max6675.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 4

int ktcSO = 7;
int ktcCS = 8;
int ktcCLK = 9;

MAX6675 ktc(ktcCLK, ktcCS, ktcSO);
Adafruit_SSD1306 display(OLED_RESET);

static const unsigned char PROGMEM image_data_piper[1024] = { 
    0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0x7f, 0x7f, 0xff, 0xff, 
    0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xc0, 0x1f, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfd, 0x00, 0x01, 0x5f, 0xdf, 0xff, 0xff, 
    0xc0, 0x07, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xea, 0x22, 0x22, 0x2f, 0xff, 0xff, 0xff, 
    0xc7, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 0x77, 0xff, 0xff, 
    0xc7, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x80, 0x00, 0xbf, 0xff, 0xff, 
    0xc7, 0xf1, 0xe0, 0x1f, 0xc6, 0x0f, 0xfc, 0x1f, 0xdc, 0x7c, 0x00, 0x00, 0x00, 0x17, 0xff, 0xff, 
    0xc7, 0xf1, 0xe0, 0x1f, 0xc4, 0x07, 0xf0, 0x07, 0x9d, 0xfe, 0x22, 0x22, 0x22, 0x2f, 0xff, 0xff, 
    0xc7, 0xf1, 0xff, 0x1f, 0xc0, 0xe3, 0xf1, 0xc3, 0x1f, 0x8e, 0x00, 0x00, 0x00, 0x07, 0x7f, 0xff, 
    0xc7, 0xf1, 0xff, 0x1f, 0xc3, 0xe3, 0xe3, 0xe2, 0x1f, 0x07, 0x08, 0x08, 0x08, 0x03, 0xff, 0xff, 
    0xc7, 0xe3, 0xff, 0x1f, 0xc7, 0xf1, 0xc7, 0xf0, 0x1e, 0x07, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
    0xc7, 0xc3, 0xff, 0x1f, 0xc7, 0xf1, 0xc7, 0xf0, 0x1c, 0x27, 0x22, 0x22, 0x22, 0x23, 0xff, 0xff, 
    0xc0, 0x07, 0xff, 0x1f, 0xc7, 0xf1, 0xc0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
    0xc0, 0x1f, 0xff, 0x1f, 0xc7, 0xf1, 0xc0, 0x00, 0x1c, 0x8a, 0xaa, 0xaa, 0xaa, 0xa8, 0xff, 0xff, 
    0xc7, 0xff, 0xff, 0x1f, 0xc7, 0xf1, 0xc7, 0xfc, 0x1c, 0x00, 0x11, 0x55, 0x55, 0x51, 0xff, 0xff, 
    0xc7, 0xff, 0xff, 0x1f, 0xc7, 0xf1, 0xc7, 0xfe, 0x1c, 0x22, 0xab, 0xbb, 0xab, 0xba, 0xff, 0xff, 
    0xc7, 0xff, 0xff, 0x1f, 0xc7, 0xe1, 0xc7, 0xfe, 0x1c, 0x00, 0x55, 0x55, 0x45, 0x54, 0x7f, 0xff, 
    0xc7, 0xff, 0xff, 0x1f, 0xc7, 0xe3, 0xe3, 0xfe, 0x1c, 0xaa, 0xff, 0xfa, 0xab, 0xfe, 0x3f, 0xff, 
    0xc7, 0xff, 0xff, 0x1f, 0xc7, 0xc7, 0xe1, 0xfb, 0x1c, 0x15, 0x55, 0x50, 0x11, 0xfd, 0x1f, 0xff, 
    0xc7, 0xff, 0xe0, 0x01, 0xc0, 0x0f, 0xf0, 0x03, 0x9c, 0xab, 0xbf, 0xaa, 0xbb, 0xff, 0xbf, 0xff, 
    0xc7, 0xff, 0xe0, 0x01, 0xc0, 0x1f, 0xfc, 0x07, 0xdc, 0x04, 0x55, 0x45, 0x55, 0x77, 0x37, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xc2, 0xaa, 0xaf, 0xea, 0xfb, 0xff, 0xbf, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xc1, 0x00, 0x15, 0xd5, 0x15, 0xff, 0x55, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xe2, 0x2a, 0xaf, 0xea, 0x2f, 0xff, 0xbb, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xf0, 0x04, 0x07, 0x50, 0x17, 0x7f, 0x75, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xf2, 0xaa, 0xaf, 0xfa, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xf1, 0x10, 0x15, 0xd5, 0x5f, 0xff, 0xdd, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xa2, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x45, 0x57, 0xf7, 0x77, 0xff, 0x75, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xd5, 0x57, 0xff, 0xff, 0xff, 0xdd, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x77, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xdf, 0xfd, 0x5f, 0xfd, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x77, 0x57, 0x57, 0x75, 0x75, 0x5f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
    0xfc, 0x07, 0xfc, 0x0f, 0xe0, 0x03, 0x80, 0x00, 0xff, 0xdd, 0xd1, 0x55, 0xd5, 0xdd, 0xdf, 0xff, 
    0xf0, 0x03, 0xf0, 0x07, 0xe0, 0x03, 0x80, 0x00, 0xff, 0xff, 0xfa, 0xab, 0xbf, 0xff, 0xff, 0xff, 
    0xe1, 0xfb, 0xe1, 0xc3, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0x55, 0x50, 0x15, 0x57, 0x55, 0x7f, 0xff, 
    0xc7, 0xff, 0xc3, 0xf1, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xea, 0xbf, 0xaf, 0xff, 0xff, 0xff, 
    0xc7, 0xff, 0xc7, 0xf1, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0xd5, 0x55, 0x55, 0x55, 0xdd, 0x7f, 0xff, 
    0xc7, 0xff, 0xc7, 0xf8, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0xbf, 0xba, 0xab, 0xfb, 0xff, 0xff, 0xff, 
    0xc3, 0xff, 0x8f, 0xf8, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0x15, 0x41, 0x57, 0xf5, 0x55, 0x7f, 0xff, 
    0xe1, 0xff, 0x8f, 0xf8, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0xaf, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xf0, 0x3f, 0x8f, 0xf8, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0xd5, 0x1f, 0xd7, 0xfd, 0x55, 0x7f, 0xff, 
    0xf8, 0x0f, 0x8f, 0xf8, 0xe0, 0x03, 0xfe, 0x3f, 0xff, 0xeb, 0xbf, 0xbf, 0xfb, 0xab, 0xff, 0xff, 
    0xff, 0x03, 0x8f, 0xf8, 0xe0, 0x03, 0xfe, 0x3f, 0xff, 0xe5, 0x55, 0x57, 0x75, 0x41, 0x7f, 0xff, 
    0xff, 0xc3, 0x8f, 0xf8, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0xfa, 0xbf, 0xaf, 0xfa, 0xab, 0xff, 0xff, 
    0xff, 0xe1, 0x8f, 0xf8, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0xf1, 0x5d, 0x5d, 0xd5, 0x11, 0xff, 0xff, 
    0xff, 0xf1, 0x8f, 0xf1, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0xfa, 0xbf, 0xff, 0xba, 0xab, 0x07, 0xff, 
    0xff, 0xf1, 0xc7, 0xf1, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0xfc, 0x55, 0x75, 0x54, 0x05, 0x60, 0x7f, 
    0xff, 0xf1, 0xc7, 0xe1, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0xfe, 0xab, 0xff, 0xaa, 0xaa, 0x99, 0x5f, 
    0xdf, 0xc3, 0xe1, 0xc3, 0xe3, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0x15, 0x55, 0x11, 0x14, 0x97, 0x40, 
    0xc0, 0x07, 0xf0, 0x07, 0xe3, 0xff, 0xfe, 0x3c, 0xff, 0xf0, 0xaa, 0xaa, 0xaa, 0x29, 0xff, 0xc2, 
    0xf0, 0x1f, 0xf8, 0x1f, 0xe3, 0xff, 0xfe, 0x3a, 0xff, 0xf6, 0x40, 0x40, 0x00, 0x07, 0x7f, 0x65, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xee, 0x62, 0xaa, 0x8a, 0xaf, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xed, 0x70, 0x00, 0x00, 0x1f, 0xff, 0xfc, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xeb, 0x7c, 0x22, 0x22, 0xbf, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xe7, 0x7e, 0x00, 0x00, 0x57, 0xf7, 0xf0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf9, 0xe6, 0xfe, 0x00, 0x02, 0xff, 0xff, 0xfa, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x39, 0xf0, 0xff, 0x00, 0x05, 0x5f, 0xff, 0xf1, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa2, 0x2b, 0xff, 0xff, 0xe2
};

static const unsigned char PROGMEM image_data_youlooked[512] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 
    0x00, 0x00, 0x00, 0x07, 0xff, 0xf3, 0x80, 0x00, 
    0x00, 0x00, 0x0f, 0xff, 0x78, 0x3f, 0xc0, 0x00, 
    0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x01, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x0f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
    0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
    0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
    0x00, 0x30, 0x05, 0xc0, 0x00, 0x00, 0x00, 0x18, 
    0x00, 0x1e, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x30, 
    0x00, 0x3f, 0xf8, 0x38, 0x00, 0x00, 0x01, 0xe0, 
    0x00, 0x23, 0x80, 0x38, 0x00, 0x00, 0x07, 0x80, 
    0x00, 0x39, 0x80, 0x1c, 0x00, 0x00, 0x0e, 0x00, 
    0x00, 0x18, 0xc0, 0x1e, 0x00, 0x00, 0x18, 0x00, 
    0x00, 0x18, 0xc0, 0x1a, 0x00, 0x00, 0x30, 0x00, 
    0x00, 0x18, 0x40, 0x18, 0x00, 0x00, 0x60, 0x00, 
    0x00, 0x18, 0x40, 0x08, 0x00, 0x00, 0xc0, 0x00, 
    0x00, 0x08, 0x60, 0x0c, 0x00, 0x01, 0x80, 0x00, 
    0x00, 0x0c, 0x30, 0x0c, 0x00, 0x03, 0x00, 0x00, 
    0x00, 0x04, 0x30, 0x18, 0x00, 0x06, 0x00, 0x00, 
    0x00, 0x04, 0x1e, 0x7e, 0x00, 0x0c, 0x00, 0x00, 
    0x00, 0x06, 0x3f, 0xc0, 0x00, 0x18, 0x00, 0x00, 
    0x00, 0x06, 0x00, 0xe0, 0x00, 0x30, 0x00, 0x00, 
    0x00, 0x02, 0x00, 0x20, 0x00, 0x60, 0x00, 0x00, 
    0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x03, 0x80, 0x00, 0x00, 0xc0, 0x00, 0x00, 
    0x00, 0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 0x00, 
    0x00, 0x00, 0xf0, 0x00, 0x03, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x3f, 0xe0, 0x06, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x1f, 0xfc, 0x0c, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x30, 0x0f, 0x18, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xe0, 0x00, 0x30, 0x00, 0x00, 0x00, 
    0x00, 0x01, 0x80, 0x00, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x03, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 
    0x00, 0x06, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x0c, 0x00, 0xe2, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x38, 0x01, 0xc6, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x60, 0x03, 0x86, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0xc0, 0x6f, 0x8c, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0x80, 0x3f, 0x38, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0x00, 0xef, 0x30, 0x00, 0x00, 0x00, 0x00, 
    0x06, 0x03, 0x8b, 0x30, 0x00, 0x00, 0x00, 0x00, 
    0x0c, 0x07, 0x12, 0x30, 0x00, 0x00, 0x00, 0x00, 
    0x18, 0x0c, 0x36, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x30, 0x18, 0x66, 0x40, 0x00, 0x00, 0x00, 0x00, 
    0x32, 0x70, 0xc6, 0x40, 0x00, 0x00, 0x00, 0x00, 
    0x23, 0xe0, 0x83, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x23, 0xe1, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x36, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x1c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {

  Serial.begin(9600);
  
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC);
 
  // Clear the buffer.
  display.clearDisplay(); 

  splash();
  you_looked();

}

void splash(){
  // Piper soft splash screen
  display.clearDisplay(); 
  display.drawBitmap(0, 0,  image_data_piper, 128, 64, 1);
  display.display();
  delay(3000);
  display.clearDisplay(); 
}

void you_looked(){
  display.clearDisplay(); 
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.print("you");

  display.setCursor(50,50);
  display.print("looked");
  display.drawBitmap(20, 2,  image_data_youlooked, 64, 64, 1);
  display.display();
  delay(3000);
  display.clearDisplay(); 
}

void loop() {
  
 Serial.print("C = "); 
 Serial.print(ktc.readCelsius());

 delay(500);
 displayData();

}

void displayData(){

  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.print("Temp:");
  display.setTextSize(7);
  int temp = (int) ktc.readCelsius();
  char buff[10];
  sprintf(buff, "%3d", temp);
  display.setCursor( 0 , 17);
  display.print(buff);
  
  display.display();
  display.clearDisplay();
}
